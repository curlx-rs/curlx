use assert_cmd::prelude::*;
use dotenvy::dotenv;
use predicates::prelude::*;
use std::process::Command;
use wiremock::matchers::{method, path};
use wiremock::{Mock, MockServer, ResponseTemplate};

fn binary() -> Result<Command, assert_cmd::cargo::CargoError> {
    Command::cargo_bin(env!("CARGO_PKG_NAME"))
}

#[test]
fn should_show_usage_when_no_args_passed() {
    binary()
        .unwrap()
        .assert()
        .failure()
        .stderr(predicate::str::contains("USAGE:"));
}

#[tokio::test]
async fn should_request_a_url() {
    dotenv().ok();

    // TODO next this should be hidden in a nice builder
    let mock_server = MockServer::start().await;
    Mock::given(method("GET"))
        .and(path("/gitignore/templates/Rust"))
        .respond_with(ResponseTemplate::new(200).set_body_string("# Generated by Cargo"))
        .mount(&mock_server)
        .await;

    // TODO also the cli instrumentation should be hidden in the builder
    binary()
        .unwrap()
        .args(&[
            "r",
            format!("{}/gitignore/templates/Rust", &mock_server.uri()).as_str(),
        ])
        .assert()
        .success()
        .stdout(predicate::str::contains("# Generated by Cargo"));
}
